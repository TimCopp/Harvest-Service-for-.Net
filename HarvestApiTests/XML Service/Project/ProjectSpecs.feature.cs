// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.239
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace HarvestApiTests.XMLService.Project
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ProjectServiceRequestsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ProjectSpecs.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Project Service Requests", "In order to simplify interactions with the Harvest API\r\nAs a developer\r\nI want to" +
                    " be to call project service calls without knowing how to authenticate.\r\nI want t" +
                    "o be to call project service calls without knowing the endpoint URL\'s required.", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get All Projects")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Project Service Requests")]
        public virtual void GetAllProjects()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get All Projects", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
 testRunner.When("I call \"GetProjects()\"");
#line 11
 testRunner.Then("the xml result should contain \"/projects\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create a project")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Project Service Requests")]
        public virtual void CreateAProject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a project", new string[] {
                        "TestProjectRecord"});
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.Then("the project should contain \"//project[id=\'[TESTPROJECTID]\']\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete a project")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Project Service Requests")]
        public virtual void DeleteAProject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a project", new string[] {
                        "TestProjectRecord"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.When("I call \"DeleteProject(projectID)\"");
#line 22
 testRunner.And("I call \"GetProject(projectID)\"");
#line 23
 testRunner.Then("the xml result should not contain \"/projects\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get All Projects Updated Since ID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Project Service Requests")]
        public virtual void GetAllProjectsUpdatedSinceID()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get All Projects Updated Since ID", new string[] {
                        "TestProjectRecord"});
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
 testRunner.When("I call \"GetProjects(updatedSinceUTC)\"");
#line 31
 testRunner.Then("the xml result should contain \"//project/name[contains(.,\'Test\')]\"");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Xpath"});
            table1.AddRow(new string[] {
                        "//project/name[contains(.,\'Test\')]"});
            table1.AddRow(new string[] {
                        "//project"});
#line 32
 testRunner.And("the xml result should be equal", ((string)(null)), table1);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get All Projects By Client ID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Project Service Requests")]
        public virtual void GetAllProjectsByClientID()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get All Projects By Client ID", new string[] {
                        "TestProjectRecord"});
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.When("I call \"GetProjects(clientID)\"");
#line 40
 testRunner.Then("the xml result should contain \"//project[client-id=\'[TESTCLIENTID]\']\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get specific project")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Project Service Requests")]
        public virtual void GetSpecificProject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get specific project", new string[] {
                        "TestProjectRecord"});
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.When("I call \"GetProject(projectID)\"");
#line 45
 testRunner.Then("the xml result should contain \"/project[id=\'[TESTPROJECTID]\']\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update a project")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Project Service Requests")]
        public virtual void UpdateAProject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a project", new string[] {
                        "TestProjectRecord"});
#line 48
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "xml"});
            table2.AddRow(new string[] {
                        "<project><name>Delete Me, Automated Test, Updated</name><client-id>[TESTCLIENTID]" +
                            "</client-id></project>"});
#line 49
 testRunner.When("I call \"UpdateProject(projectID,xml)\"", ((string)(null)), table2);
#line 52
 testRunner.And("I call \"GetProject(projectID)\"");
#line 53
 testRunner.Then("the xml result should contain \"/project[name=\'Delete Me, Automated Test, Updated\'" +
                    "]\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Toggle a projects state")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Project Service Requests")]
        public virtual void ToggleAProjectsState()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Toggle a projects state", new string[] {
                        "TestProjectRecord"});
#line 56
this.ScenarioSetup(scenarioInfo);
#line 57
 testRunner.When("I call \"ToggleProjectState(projectID)\"");
#line 58
 testRunner.And("I call \"GetProject(projectID)\"");
#line 59
 testRunner.Then("the xml result should contain \"/project[active=\'false\']\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Toggle a projects state to inactive and back again")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Project Service Requests")]
        public virtual void ToggleAProjectsStateToInactiveAndBackAgain()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Toggle a projects state to inactive and back again", new string[] {
                        "TestProjectRecord"});
#line 62
this.ScenarioSetup(scenarioInfo);
#line 63
 testRunner.When("I call \"ToggleProjectState(projectID)\"");
#line 64
 testRunner.And("I call \"ToggleProjectState(projectID)\"");
#line 65
 testRunner.And("I call \"GetProject(projectID)\"");
#line 66
 testRunner.Then("the xml result should contain \"/project[active=\'true\']\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
