// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.239
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace HarvestApiTests.XMLService.Client
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ClientServiceRequestsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ClientSpecs.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Client Service Requests", "In order to simplify interactions with the Harvest API\r\nAs a developer\r\nI want to" +
                    " be to call client service calls without knowing how to authenticate.\r\nI want to" +
                    " be to call client service calls without knowing the endpoint URL\'s required.", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get All Clients")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Client Service Requests")]
        public virtual void GetAllClients()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get All Clients", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
 testRunner.When("I call \"GetClients()\"");
#line 11
 testRunner.Then("the xml result should contain \"/clients\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Create a client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Client Service Requests")]
        public virtual void CreateAClient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a client", new string[] {
                        "TestClientRecord"});
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.Then("the client xml should contain \"//client[id=\'[TESTCLIENTID]\']\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete a client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Client Service Requests")]
        public virtual void DeleteAClient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a client", new string[] {
                        "TestClientRecord"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.When("I call \"DeleteClient(clientID)\"");
#line 22
 testRunner.And("I call \"GetClient(clientID)\"");
#line 23
 testRunner.Then("the xml result should not contain \"/clients\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get All Clients Updated Since ID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Client Service Requests")]
        public virtual void GetAllClientsUpdatedSinceID()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get All Clients Updated Since ID", new string[] {
                        "TestClientRecord"});
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.When("I call \"GetClients(updatedSinceUTC)\"");
#line 28
 testRunner.Then("the xml result should contain \"//client/name[contains(.,\'Test\')]\"");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Xpath"});
            table1.AddRow(new string[] {
                        "//client/name[contains(.,\'Test\')]"});
            table1.AddRow(new string[] {
                        "//client"});
#line 29
 testRunner.Then("the xml result should be equal", ((string)(null)), table1);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get specific client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Client Service Requests")]
        public virtual void GetSpecificClient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get specific client", new string[] {
                        "TestClientRecord"});
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
 testRunner.When("I call \"GetClient(clientID)\"");
#line 37
 testRunner.Then("the xml result should contain \"/client[id=\'[TESTCLIENTID]\']\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update a client")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Client Service Requests")]
        public virtual void UpdateAClient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a client", new string[] {
                        "TestClientRecord"});
#line 40
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "xml"});
            table2.AddRow(new string[] {
                        "<client><name>Delete Me, Automated Test, Updated</name></client>"});
#line 41
 testRunner.When("I call \"UpdateClient(clientID,xml)\"", ((string)(null)), table2);
#line 44
 testRunner.And("I call \"GetClient(clientID)\"");
#line 45
 testRunner.Then("the xml result should contain \"/client[name=\'Delete Me, Automated Test, Updated\']" +
                    "\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Toggle a client’s state")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Client Service Requests")]
        public virtual void ToggleAClientSState()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Toggle a client’s state", new string[] {
                        "TestClientRecord"});
#line 50
this.ScenarioSetup(scenarioInfo);
#line 51
 testRunner.When("I call \"ToggleClientState(clientID)\"");
#line 52
 testRunner.And("I call \"GetClient(clientID)\"");
#line 53
 testRunner.Then("the xml result should contain \"/client[active=\'false\']\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Toggle a clients state to inactive and back again")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Client Service Requests")]
        public virtual void ToggleAClientsStateToInactiveAndBackAgain()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Toggle a clients state to inactive and back again", new string[] {
                        "TestClientRecord"});
#line 56
this.ScenarioSetup(scenarioInfo);
#line 57
 testRunner.When("I call \"ToggleClientState(clientID)\"");
#line 58
 testRunner.And("I call \"ToggleClientState(clientID)\"");
#line 59
 testRunner.And("I call \"GetClient(clientID)\"");
#line 60
 testRunner.Then("the xml result should contain \"/client[active=\'true\']\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
